// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
	"strings"
)

var (
	slowLogFieldNames          = builder.RawFieldNames(&SlowLog{})
	slowLogRows                = strings.Join(slowLogFieldNames, ",")
	slowLogRowsExpectAutoSet   = strings.Join(stringx.Remove(slowLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	slowLogRowsWithPlaceHolder = strings.Join(stringx.Remove(slowLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	slowLogModel interface {
		Insert(ctx context.Context, data *SlowLog) (sql.Result, error)
		InsertBatch(ctx context.Context, dataList []*SlowLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SlowLog, error)
		Update(ctx context.Context, data *SlowLog) error
		Delete(ctx context.Context, id int64) error
		FindByQuery(ctx context.Context, sqlId string, startTime *int64, endTime *int64, sortBy string, limit int, offset int) ([]*SlowLog, error)
	}

	defaultSlowLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SlowLog struct {
		Id           int64           `db:"id"`
		SqlId        sql.NullString  `db:"sql_id"`        // SQL_ID
		SqlText      sql.NullString  `db:"sql_text"`      // SQL语句
		DatabaseName sql.NullString  `db:"database_name"` // 数据库名
		Client       sql.NullString  `db:"client"`        // 客户端
		UserName     sql.NullString  `db:"user_name"`     // 用户
		ExecuteAt    sql.NullInt64   `db:"execute_at"`    // 执行开始时间（Unix timestamp），单位：毫秒
		QueryTime    sql.NullFloat64 `db:"query_time"`    // 执行耗时（秒）
		LockTime     sql.NullFloat64 `db:"lock_time"`     // 锁等待耗时（秒）
		RowsExamined sql.NullInt64   `db:"rows_examined"` // 扫描行数
		RowsSent     sql.NullInt64   `db:"rows_sent"`     // 返回行数
	}
)

func newSlowLogModel(conn sqlx.SqlConn) *defaultSlowLogModel {
	return &defaultSlowLogModel{
		conn:  conn,
		table: "`slow_log`",
	}
}

func (m *defaultSlowLogModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSlowLogModel) FindOne(ctx context.Context, id int64) (*SlowLog, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", slowLogRows, m.table)
	var resp SlowLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSlowLogModel) Insert(ctx context.Context, data *SlowLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, slowLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.SqlId, data.SqlText, data.DatabaseName, data.Client, data.UserName, data.ExecuteAt, data.QueryTime, data.LockTime, data.RowsExamined, data.RowsSent)
	return ret, err
}

func (m *defaultSlowLogModel) Update(ctx context.Context, data *SlowLog) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, slowLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.SqlId, data.SqlText, data.DatabaseName, data.Client, data.UserName, data.ExecuteAt, data.QueryTime, data.LockTime, data.RowsExamined, data.RowsSent, data.Id)
	return err
}

func (m *defaultSlowLogModel) InsertBatch(ctx context.Context, dataList []*SlowLog) (sql.Result, error) {
	if len(dataList) == 0 {
		return nil, nil
	}

	valueStrings := make([]string, 0, len(dataList))
	valueArgs := make([]interface{}, 0, len(dataList)*10) // 假设每个SlowLog结构体有10个字段

	for _, data := range dataList {
		valueStrings = append(valueStrings, "(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)")

		// 将SlowLog结构体的字段依次添加到valueArgs中
		valueArgs = append(valueArgs, data.SqlId)
		valueArgs = append(valueArgs, data.SqlText)
		valueArgs = append(valueArgs, data.DatabaseName)
		valueArgs = append(valueArgs, data.Client)
		valueArgs = append(valueArgs, data.UserName)
		valueArgs = append(valueArgs, data.ExecuteAt)
		valueArgs = append(valueArgs, data.QueryTime)
		valueArgs = append(valueArgs, data.LockTime)
		valueArgs = append(valueArgs, data.RowsExamined)
		valueArgs = append(valueArgs, data.RowsSent)
	}

	query := fmt.Sprintf("INSERT INTO %s (%s) VALUES %s", m.table, slowLogRowsExpectAutoSet, strings.Join(valueStrings, ","))
	ret, err := m.conn.ExecCtx(ctx, query, valueArgs...)
	return ret, err
}

func (m *defaultSlowLogModel) FindByQuery(ctx context.Context, sqlId string, startTime *int64, endTime *int64, sortBy string, limit int, offset int) ([]*SlowLog, error) {
	query := fmt.Sprintf("SELECT * FROM %s WHERE sql_id LIKE ? ", m.table)
	args := []interface{}{"%" + sqlId + "%"}

	if startTime != nil {
		query += " AND execute_at >= ?"
		args = append(args, *startTime)
	}

	if endTime != nil {
		query += " AND execute_at <= ?"
		args = append(args, *endTime)
	}

	if sortBy != "" {
		query += fmt.Sprintf(" ORDER BY %s", sortBy)
	}

	if limit > 0 {
		query += " LIMIT ?"
		args = append(args, limit)

		if offset > 0 {
			query += " OFFSET ?"
			args = append(args, offset)
		}
	}

	var dataList []*SlowLog
	err := m.conn.QueryRowsCtx(ctx, &dataList, query, args...)
	if err != nil {
		return nil, err
	}

	return dataList, nil
}
